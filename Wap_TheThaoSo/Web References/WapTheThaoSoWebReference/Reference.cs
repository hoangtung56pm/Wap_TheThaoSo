//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace Wap_TheThaoSo.WapTheThaoSoWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetAvatarThumbSoap", Namespace="http://tempuri.org/")]
    public partial class GetAvatarThumb : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAvatarOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarByCropOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarNotByCropOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarWithTextWaterMarkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarGifOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarGifWithTextWaterMarkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarWithTextWaterMarkWithResizeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetAvatarThumb() {
            this.Url = global::Wap_TheThaoSo.Properties.Settings.Default.Wap_TheThaoSo_WapTheThaoSoWebReference_GetAvatarThumb;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAvatarCompletedEventHandler GetAvatarCompleted;
        
        /// <remarks/>
        public event GetAvatarByCropCompletedEventHandler GetAvatarByCropCompleted;
        
        /// <remarks/>
        public event GetAvatarNotByCropCompletedEventHandler GetAvatarNotByCropCompleted;
        
        /// <remarks/>
        public event GetAvatarWithTextWaterMarkCompletedEventHandler GetAvatarWithTextWaterMarkCompleted;
        
        /// <remarks/>
        public event GetAvatarGifCompletedEventHandler GetAvatarGifCompleted;
        
        /// <remarks/>
        public event GetAvatarGifWithTextWaterMarkCompletedEventHandler GetAvatarGifWithTextWaterMarkCompleted;
        
        /// <remarks/>
        public event GetAvatarWithTextWaterMarkWithResizeCompletedEventHandler GetAvatarWithTextWaterMarkWithResizeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatar(string avatarPath, int width, int height) {
            object[] results = this.Invoke("GetAvatar", new object[] {
                        avatarPath,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarAsync(string avatarPath, int width, int height) {
            this.GetAvatarAsync(avatarPath, width, height, null);
        }
        
        /// <remarks/>
        public void GetAvatarAsync(string avatarPath, int width, int height, object userState) {
            if ((this.GetAvatarOperationCompleted == null)) {
                this.GetAvatarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarOperationCompleted);
            }
            this.InvokeAsync("GetAvatar", new object[] {
                        avatarPath,
                        width,
                        height}, this.GetAvatarOperationCompleted, userState);
        }
        
        private void OnGetAvatarOperationCompleted(object arg) {
            if ((this.GetAvatarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarCompleted(this, new GetAvatarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarByCrop", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarByCrop(string avatarPath, int width, int height) {
            object[] results = this.Invoke("GetAvatarByCrop", new object[] {
                        avatarPath,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarByCropAsync(string avatarPath, int width, int height) {
            this.GetAvatarByCropAsync(avatarPath, width, height, null);
        }
        
        /// <remarks/>
        public void GetAvatarByCropAsync(string avatarPath, int width, int height, object userState) {
            if ((this.GetAvatarByCropOperationCompleted == null)) {
                this.GetAvatarByCropOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarByCropOperationCompleted);
            }
            this.InvokeAsync("GetAvatarByCrop", new object[] {
                        avatarPath,
                        width,
                        height}, this.GetAvatarByCropOperationCompleted, userState);
        }
        
        private void OnGetAvatarByCropOperationCompleted(object arg) {
            if ((this.GetAvatarByCropCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarByCropCompleted(this, new GetAvatarByCropCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarNotByCrop", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarNotByCrop(string avatarPath, int width, int height) {
            object[] results = this.Invoke("GetAvatarNotByCrop", new object[] {
                        avatarPath,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarNotByCropAsync(string avatarPath, int width, int height) {
            this.GetAvatarNotByCropAsync(avatarPath, width, height, null);
        }
        
        /// <remarks/>
        public void GetAvatarNotByCropAsync(string avatarPath, int width, int height, object userState) {
            if ((this.GetAvatarNotByCropOperationCompleted == null)) {
                this.GetAvatarNotByCropOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarNotByCropOperationCompleted);
            }
            this.InvokeAsync("GetAvatarNotByCrop", new object[] {
                        avatarPath,
                        width,
                        height}, this.GetAvatarNotByCropOperationCompleted, userState);
        }
        
        private void OnGetAvatarNotByCropOperationCompleted(object arg) {
            if ((this.GetAvatarNotByCropCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarNotByCropCompleted(this, new GetAvatarNotByCropCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarWithTextWaterMark", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarWithTextWaterMark(string avatarPath, string strText, string font, int fontSize, bool fontBold, int floatx, int isOverwrite) {
            object[] results = this.Invoke("GetAvatarWithTextWaterMark", new object[] {
                        avatarPath,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        isOverwrite});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarWithTextWaterMarkAsync(string avatarPath, string strText, string font, int fontSize, bool fontBold, int floatx, int isOverwrite) {
            this.GetAvatarWithTextWaterMarkAsync(avatarPath, strText, font, fontSize, fontBold, floatx, isOverwrite, null);
        }
        
        /// <remarks/>
        public void GetAvatarWithTextWaterMarkAsync(string avatarPath, string strText, string font, int fontSize, bool fontBold, int floatx, int isOverwrite, object userState) {
            if ((this.GetAvatarWithTextWaterMarkOperationCompleted == null)) {
                this.GetAvatarWithTextWaterMarkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarWithTextWaterMarkOperationCompleted);
            }
            this.InvokeAsync("GetAvatarWithTextWaterMark", new object[] {
                        avatarPath,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        isOverwrite}, this.GetAvatarWithTextWaterMarkOperationCompleted, userState);
        }
        
        private void OnGetAvatarWithTextWaterMarkOperationCompleted(object arg) {
            if ((this.GetAvatarWithTextWaterMarkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarWithTextWaterMarkCompleted(this, new GetAvatarWithTextWaterMarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarGif", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarGif(string avatarPath, int width, int height) {
            object[] results = this.Invoke("GetAvatarGif", new object[] {
                        avatarPath,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarGifAsync(string avatarPath, int width, int height) {
            this.GetAvatarGifAsync(avatarPath, width, height, null);
        }
        
        /// <remarks/>
        public void GetAvatarGifAsync(string avatarPath, int width, int height, object userState) {
            if ((this.GetAvatarGifOperationCompleted == null)) {
                this.GetAvatarGifOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarGifOperationCompleted);
            }
            this.InvokeAsync("GetAvatarGif", new object[] {
                        avatarPath,
                        width,
                        height}, this.GetAvatarGifOperationCompleted, userState);
        }
        
        private void OnGetAvatarGifOperationCompleted(object arg) {
            if ((this.GetAvatarGifCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarGifCompleted(this, new GetAvatarGifCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarGifWithTextWaterMark", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarGifWithTextWaterMark(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty, int duration) {
            object[] results = this.Invoke("GetAvatarGifWithTextWaterMark", new object[] {
                        avatarPath,
                        width,
                        height,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        floaty,
                        duration});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarGifWithTextWaterMarkAsync(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty, int duration) {
            this.GetAvatarGifWithTextWaterMarkAsync(avatarPath, width, height, strText, font, fontSize, fontBold, floatx, floaty, duration, null);
        }
        
        /// <remarks/>
        public void GetAvatarGifWithTextWaterMarkAsync(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty, int duration, object userState) {
            if ((this.GetAvatarGifWithTextWaterMarkOperationCompleted == null)) {
                this.GetAvatarGifWithTextWaterMarkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarGifWithTextWaterMarkOperationCompleted);
            }
            this.InvokeAsync("GetAvatarGifWithTextWaterMark", new object[] {
                        avatarPath,
                        width,
                        height,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        floaty,
                        duration}, this.GetAvatarGifWithTextWaterMarkOperationCompleted, userState);
        }
        
        private void OnGetAvatarGifWithTextWaterMarkOperationCompleted(object arg) {
            if ((this.GetAvatarGifWithTextWaterMarkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarGifWithTextWaterMarkCompleted(this, new GetAvatarGifWithTextWaterMarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarWithTextWaterMarkWithResize", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarWithTextWaterMarkWithResize(string avatarPath, string strText, string font, int fontSize, bool fontBold, int floatx, int isOverwrite, int width) {
            object[] results = this.Invoke("GetAvatarWithTextWaterMarkWithResize", new object[] {
                        avatarPath,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        isOverwrite,
                        width});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarWithTextWaterMarkWithResizeAsync(string avatarPath, string strText, string font, int fontSize, bool fontBold, int floatx, int isOverwrite, int width) {
            this.GetAvatarWithTextWaterMarkWithResizeAsync(avatarPath, strText, font, fontSize, fontBold, floatx, isOverwrite, width, null);
        }
        
        /// <remarks/>
        public void GetAvatarWithTextWaterMarkWithResizeAsync(string avatarPath, string strText, string font, int fontSize, bool fontBold, int floatx, int isOverwrite, int width, object userState) {
            if ((this.GetAvatarWithTextWaterMarkWithResizeOperationCompleted == null)) {
                this.GetAvatarWithTextWaterMarkWithResizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarWithTextWaterMarkWithResizeOperationCompleted);
            }
            this.InvokeAsync("GetAvatarWithTextWaterMarkWithResize", new object[] {
                        avatarPath,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        isOverwrite,
                        width}, this.GetAvatarWithTextWaterMarkWithResizeOperationCompleted, userState);
        }
        
        private void OnGetAvatarWithTextWaterMarkWithResizeOperationCompleted(object arg) {
            if ((this.GetAvatarWithTextWaterMarkWithResizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarWithTextWaterMarkWithResizeCompleted(this, new GetAvatarWithTextWaterMarkWithResizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarCompletedEventHandler(object sender, GetAvatarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarByCropCompletedEventHandler(object sender, GetAvatarByCropCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarByCropCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarByCropCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarNotByCropCompletedEventHandler(object sender, GetAvatarNotByCropCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarNotByCropCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarNotByCropCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarWithTextWaterMarkCompletedEventHandler(object sender, GetAvatarWithTextWaterMarkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarWithTextWaterMarkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarWithTextWaterMarkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarGifCompletedEventHandler(object sender, GetAvatarGifCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarGifCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarGifCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarGifWithTextWaterMarkCompletedEventHandler(object sender, GetAvatarGifWithTextWaterMarkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarGifWithTextWaterMarkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarGifWithTextWaterMarkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarWithTextWaterMarkWithResizeCompletedEventHandler(object sender, GetAvatarWithTextWaterMarkWithResizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarWithTextWaterMarkWithResizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarWithTextWaterMarkWithResizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591