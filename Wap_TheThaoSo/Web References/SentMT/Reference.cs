//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace Wap_TheThaoSo.SentMT {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="sendMTSoapBinding", Namespace="http://127.0.0.1:8080/api/services/sendMT")]
    public partial class ServiceProviderService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback sendMTOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMTExOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMTEx2OperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMTPushOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ServiceProviderService() {
            this.Url = global::Wap_TheThaoSo.Properties.Settings.Default.Wap_TheThaoSo_SentMT_ServiceProviderService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event sendMTCompletedEventHandler sendMTCompleted;
        
        /// <remarks/>
        public event sendMTExCompletedEventHandler sendMTExCompleted;
        
        /// <remarks/>
        public event sendMTEx2CompletedEventHandler sendMTEx2Completed;
        
        /// <remarks/>
        public event sendMTPushCompletedEventHandler sendMTPushCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://mt.webservice.ems.vmg.com", ResponseNamespace="http://127.0.0.1:8080/api/services/sendMT")]
        [return: System.Xml.Serialization.SoapElementAttribute("sendMTReturn")]
        public int sendMT(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType) {
            object[] results = this.Invoke("sendMT", new object[] {
                        userID,
                        message,
                        serviceID,
                        commandCode,
                        messageType,
                        requestID,
                        totalMessage,
                        messageIndex,
                        isMore,
                        contentType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void sendMTAsync(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType) {
            this.sendMTAsync(userID, message, serviceID, commandCode, messageType, requestID, totalMessage, messageIndex, isMore, contentType, null);
        }
        
        /// <remarks/>
        public void sendMTAsync(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType, object userState) {
            if ((this.sendMTOperationCompleted == null)) {
                this.sendMTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMTOperationCompleted);
            }
            this.InvokeAsync("sendMT", new object[] {
                        userID,
                        message,
                        serviceID,
                        commandCode,
                        messageType,
                        requestID,
                        totalMessage,
                        messageIndex,
                        isMore,
                        contentType}, this.sendMTOperationCompleted, userState);
        }
        
        private void OnsendMTOperationCompleted(object arg) {
            if ((this.sendMTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMTCompleted(this, new sendMTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://mt.webservice.ems.vmg.com", ResponseNamespace="http://127.0.0.1:8080/api/services/sendMT")]
        [return: System.Xml.Serialization.SoapElementAttribute("sendMTExReturn")]
        public int sendMTEx(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType) {
            object[] results = this.Invoke("sendMTEx", new object[] {
                        userID,
                        message,
                        serviceID,
                        commandCode,
                        messageType,
                        requestID,
                        totalMessage,
                        messageIndex,
                        isMore,
                        contentType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void sendMTExAsync(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType) {
            this.sendMTExAsync(userID, message, serviceID, commandCode, messageType, requestID, totalMessage, messageIndex, isMore, contentType, null);
        }
        
        /// <remarks/>
        public void sendMTExAsync(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType, object userState) {
            if ((this.sendMTExOperationCompleted == null)) {
                this.sendMTExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMTExOperationCompleted);
            }
            this.InvokeAsync("sendMTEx", new object[] {
                        userID,
                        message,
                        serviceID,
                        commandCode,
                        messageType,
                        requestID,
                        totalMessage,
                        messageIndex,
                        isMore,
                        contentType}, this.sendMTExOperationCompleted, userState);
        }
        
        private void OnsendMTExOperationCompleted(object arg) {
            if ((this.sendMTExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMTExCompleted(this, new sendMTExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://mt.webservice.ems.vmg.com", ResponseNamespace="http://127.0.0.1:8080/api/services/sendMT")]
        [return: System.Xml.Serialization.SoapElementAttribute("sendMTEx2Return")]
        public int sendMTEx2(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType, int messageClass, int mwi, int dataCoding) {
            object[] results = this.Invoke("sendMTEx2", new object[] {
                        userID,
                        message,
                        serviceID,
                        commandCode,
                        messageType,
                        requestID,
                        totalMessage,
                        messageIndex,
                        isMore,
                        contentType,
                        messageClass,
                        mwi,
                        dataCoding});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void sendMTEx2Async(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType, int messageClass, int mwi, int dataCoding) {
            this.sendMTEx2Async(userID, message, serviceID, commandCode, messageType, requestID, totalMessage, messageIndex, isMore, contentType, messageClass, mwi, dataCoding, null);
        }
        
        /// <remarks/>
        public void sendMTEx2Async(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType, int messageClass, int mwi, int dataCoding, object userState) {
            if ((this.sendMTEx2OperationCompleted == null)) {
                this.sendMTEx2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMTEx2OperationCompleted);
            }
            this.InvokeAsync("sendMTEx2", new object[] {
                        userID,
                        message,
                        serviceID,
                        commandCode,
                        messageType,
                        requestID,
                        totalMessage,
                        messageIndex,
                        isMore,
                        contentType,
                        messageClass,
                        mwi,
                        dataCoding}, this.sendMTEx2OperationCompleted, userState);
        }
        
        private void OnsendMTEx2OperationCompleted(object arg) {
            if ((this.sendMTEx2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMTEx2Completed(this, new sendMTEx2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://mt.webservice.ems.vmg.com", ResponseNamespace="http://127.0.0.1:8080/api/services/sendMT")]
        [return: System.Xml.Serialization.SoapElementAttribute("sendMTPushReturn")]
        public int sendMTPush(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType) {
            object[] results = this.Invoke("sendMTPush", new object[] {
                        userID,
                        message,
                        serviceID,
                        commandCode,
                        messageType,
                        requestID,
                        totalMessage,
                        messageIndex,
                        isMore,
                        contentType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void sendMTPushAsync(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType) {
            this.sendMTPushAsync(userID, message, serviceID, commandCode, messageType, requestID, totalMessage, messageIndex, isMore, contentType, null);
        }
        
        /// <remarks/>
        public void sendMTPushAsync(string userID, string message, string serviceID, string commandCode, string messageType, string requestID, string totalMessage, string messageIndex, string isMore, string contentType, object userState) {
            if ((this.sendMTPushOperationCompleted == null)) {
                this.sendMTPushOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMTPushOperationCompleted);
            }
            this.InvokeAsync("sendMTPush", new object[] {
                        userID,
                        message,
                        serviceID,
                        commandCode,
                        messageType,
                        requestID,
                        totalMessage,
                        messageIndex,
                        isMore,
                        contentType}, this.sendMTPushOperationCompleted, userState);
        }
        
        private void OnsendMTPushOperationCompleted(object arg) {
            if ((this.sendMTPushCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMTPushCompleted(this, new sendMTPushCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void sendMTCompletedEventHandler(object sender, sendMTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void sendMTExCompletedEventHandler(object sender, sendMTExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMTExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMTExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void sendMTEx2CompletedEventHandler(object sender, sendMTEx2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMTEx2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMTEx2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void sendMTPushCompletedEventHandler(object sender, sendMTPushCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMTPushCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMTPushCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591